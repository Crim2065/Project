RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^ index.php [QSA,L]

- copy code below in index.php file
<?php
require __DIR__ . '/../vendor/autoload.php';

// Instantiate the app
$settings = require __DIR__ . '/../src/settings.php';
$app = new \Slim\App($settings);

// Set up dependencies
require __DIR__ . '/../src/dependencies.php';

// Register routes
require __DIR__ . '/../src/routes.php';

// Run app
$app->run();

- Next, create settings.php, dependencies.php and routes.php in src folder
- copy code below in settings.php
<?php
return [
    'settings' => [
        'displayErrorDetails' => true, // set to false in production
        'addContentLengthHeader' => false, // Allow the web server to send the content-length header

        'upload_directory' => __DIR__ . '/../public/uploads', // upload directory

// Renderer settings
'renderer' => [
    'template_path' => __DIR__ . '/../templates/',
    ],

    // Database connection settings
    "db" => [
    "host" => "localhost",
    "dbname" => "sms",
    "user" => "root",
    "pass" => "",
    ]
],
];

- copy code below in dependencies.php

<?php
// DIC configuration

$container = $app->getContainer();

// PDO database library
$container['db'] = function ($c) {
    $settings = $c->get('settings')['db'];
    $pdo = new PDO("mysql:host=" . $settings['host'] . ";dbname=" .
$settings['dbname'],
$settings['user'], $settings['pass']);
$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
$pdo->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);
return $pdo;
};

- copy code below in routes.php

<?php

// route
require __DIR__ . '/Controllers/student.php';

-Create student.php in Controllers folder and copy code below:
<?php 

use Slim\Http\Request; //namespace 
use Slim\Http\Response; //namespace 

//include adminProc.php file 
include __DIR__ .'/function/studentProc.php';


//alow cors
$app->options('/{routes:.+}', function ($request, $response, $args) {
    return $response;
});

$app->add(function ($req, $res, $next) {
    $response = $next($req, $res);
    return $response
            ->withHeader('Access-Control-Allow-Origin', '*')
            ->withHeader('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type, Accept, Origin, Authorization')
            ->withHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS');
});
//end

// FOR STUDENT

//read table student 
$app->get('/student', function (Request $request, Response $response, array $arg){

    return $this->response->withJson(array('data' => 'success'), 200); });  
 
// read all data from table student 
$app->get('/allstudent',function (Request $request, Response $response,  array $arg) { 

    $data = getAllstudent($this->db); 
    if (is_null($data)) { 

        return $this->response->withHeader('Access-Control-Allow-Origin', '*')->withJson(array('error' => 'no data'), 404); 
} 
    return $this->response->withJson(array('data' => $data), 200); }); 

//request table order by condition (student id) 
$app->get('/student/[{id}]', function ($request, $response, $args){   
    $studentId = $args['id']; 
    if (!is_numeric($studentId)) { 

        return $this->response->withJson(array('error' => 'numeric paremeter required'), 500);  
} 
    $data = getstudent($this->db, $studentId); 
    if (empty($data)) { 

        return $this->response->withJson(array('error' => 'no data'), 500); 
} 

return $this->response->withJson(array('data' => $data), 200);});

//post method order
$app->post('/student/add', function ($request, $response, $args) { 

    $form_data = $request->getParsedBody(); 
    $data = createstudent($this->db, $form_data); 
    if (is_null($data)) { 

        return $this->response->withHeader('Access-Control-Allow-Origin', '*')->withJson(array('error' => 'no data'), 404); 
} 
    return $this->response->withJson(array('data' => $data), 200); }); 


//delete row Order
$app->delete('/student/del/[{id}]', function ($request, $response, $args){   
    $studentId = $args['id']; 
    
   if (!is_numeric($studentId)) { 

       return $this->response->withJson(array('error' => 'numeric paremeter required'), 422); } 
       $data = deletestudent($this->db,$studentId); 
       if (empty($data)) { 

           return $this->response->withJson(array($studentId=> 'is successfully deleted'), 202);}; }); 
 

   
//put table order 
$app->put('/student/put/[{id}]', function ($request, $response, $args){
    $studentId = $args['id']; 
    
    if (!is_numeric($studentId)) { 
        
        return $this->response->withJson(array('error' => 'numeric paremeter required'), 422); } 
        $form_dat=$request->getParsedBody(); 
        $data=updatestudent($this->db,$form_dat,$studentId); 
        if ($data <=0)
        return $this->response->withJson(array('data' => 'successfully updated'), 200); 
});
   
- create a folder named function in Controllers folder. Then, create studentProc.php file and copy code below:
<?php 
//get all STUDENT 
function getAllstudent($db) {

    
    $sql = 'Select * FROM student '; 
    $stmt = $db->prepare ($sql); 
    $stmt ->execute(); 
    return $stmt->fetchAll(PDO::FETCH_ASSOC); 
} 

//get STUDENT by id 
function getstudent($db, $studentId) {

    $sql = 'Select o.studentID, o.studentName, o.studentEmail, o.studentPhone, o.studentIntake FROM student o  ';
    $sql .= 'Where o.id = :id';
    $stmt = $db->prepare ($sql);
    $id = (int) $studentId;
    $stmt->bindParam(':id', $id, PDO::PARAM_INT);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC); 

}

//add new STUDENT 
function createstudent($db, $form_data) { 
    //stop at sisni
    $sql = 'Insert into student ( studentID, studentName, studentEmail, studentPhone, studentIntake)'; 
    $sql .= 'values (:studentID, :studentName, :studentEmail, :studentPhone, :studentIntake)';  
    $stmt = $db->prepare ($sql); 
    $stmt->bindParam(':studentID', $form_data['studentID']);  
    $stmt->bindParam(':studentName', ($form_data['studentName']));
    $stmt->bindParam(':studentEmail', ($form_data['studentEmail']));
    $stmt->bindParam(':studentPhone', ($form_data['studentPhone']));
    $stmt->bindParam(':studentIntake', ($form_data['studentIntake']));
    $stmt->execute(); 
    return $db->lastInsertID();
}


//delete STUDENT by id 
function deletestudent($db,$studentId) { 

    $sql = ' Delete from student where id = :id';
    $stmt = $db->prepare($sql);  
    $id = (int)$studentId; 
    $stmt->bindParam(':id', $id, PDO::PARAM_INT); 
    $stmt->execute(); 
} 

//update STUDENT by id 
function updatestudent($db,$form_dat,$studentId) { 

    
    $sql = 'UPDATE student SET studentID = :studentID, studentName = :studentName , studentEmail = :studentEmail , studentPhone = :studentPhone , studentIntake = :studentIntake'; 
    $sql .=' WHERE id = :id'; 
    $stmt = $db->prepare ($sql); 
    $id = (int)$studentId;  
    $stmt->bindParam(':id', $id, PDO::PARAM_INT);
    $stmt->bindParam(':studentID', $form_dat['studentID']);    
    $stmt->bindParam(':studentName', ($form_dat['studentName']));
    $stmt->bindParam(':studentEmail', ($form_dat['studentEmail']));
    $stmt->bindParam(':studentPhone', ($form_dat['studentPhone']));
    $stmt->bindParam(':studentIntake', ($form_dat['studentIntake']));
    $stmt->execute(); 
}

- Run the backend by using this code:

php -S localhost:8080 -t public public/index.php
